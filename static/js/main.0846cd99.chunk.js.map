{"version":3,"sources":["components/Layout.tsx","services/dataService.ts","hooks/useData.tsx","app/home/schedule-context.ts","app/home/ScheduleProvider.tsx","components/table/TableRow.tsx","components/table/Table.tsx","components/UrlButton.tsx","components/loading/LoadingAnimation.tsx","components/SearchInput.tsx","app/home/ScheduleTable.tsx","app/App.tsx","theme.ts","index.tsx"],"names":["Layout","children","display","maxWidth","flexDirection","mx","DataService","data","a","rawData","tableHeaderRow","values","shift","organizedData","map","lecture","subject","year","group","zoomUrl","eLearningUrl","info","headings","scheduleData","dataService","fetchScheduleData","fetch","then","response","status","json","organizeData","console","log","catch","err","useData","useQuery","ScheduleContext","createContext","useScheduleContext","context","useContext","Error","ScheduleProvider","props","useState","search","setSearch","filteredData","setFilteredData","useMemo","filtered","length","filter","includes","Provider","value","onSearch","setTimeout","rowMobileProps","borderBottom","cellMobileProps","alignItems","justifyContent","TableRow","row","headerGroups","isSmallScreen","rowProps","cellProps","cellTextAlign","getRowProps","cells","cell","i","getCellProps","headers","render","textAlign","memo","MyTable","columns","useMediaQuery","useTable","initialState","pageIndex","usePagination","getTableProps","getTableBodyProps","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","headerGroup","getHeaderGroupProps","column","getHeaderProps","id","m","label","onClick","isDisabled","icon","h","w","mr","flexShrink","textProps","ml","fontWeight","as","UrlButton","text","url","color","href","isExternal","_hover","textDecoration","colorScheme","LoadingAnimation","className","SearchInput","savedSearch","setSavedSearch","useEffect","getLocalValue","localStorage","getItem","p","placeholder","defaultValue","onChange","e","setItem","target","ScheduleTable","isFetched","Header","accessor","Cell","queryClient","QueryClient","App","client","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0846cd99.chunk.js","sourcesContent":["import { Box } from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: Props) => {\n  return (\n    <Box display=\"flex\" maxWidth=\"1350px\" flexDirection=\"column\" mx=\"auto\">\n      {children}\n    </Box>\n  );\n};\n\nexport default Layout;\n","class DataService {\n  async organizeData(data: any) {\n    const rawData = await data;\n\n    const tableHeaderRow = rawData && rawData.values[0];\n\n    //remove rows that are not schedule data\n    rawData.values.shift();\n    rawData.values.shift();\n\n    const organizedData = rawData.values.map((lecture: any) => ({\n      subject: lecture[0],\n      year: lecture[1],\n      group: typeof lecture[2] === \"string\" ? lecture[2] : `${lecture[2]}`,\n      zoomUrl: lecture[3],\n      eLearningUrl: lecture[4],\n      info: lecture[5],\n    }));\n\n    return {\n      headings: tableHeaderRow,\n      scheduleData: [...organizedData],\n    };\n  }\n}\n\nexport const dataService = new DataService();\n","import { useQuery } from \"react-query\";\nimport { dataService } from \"../services/dataService\";\n\nconst fetchScheduleData = () => {\n  //TODO: Public url, but should be moved to .env anyway\n  const url =\n    \"https://script.google.com/macros/s/AKfycbx-IHfmCLu265z22d38-A-F-ZcQEBSmBesbOa1Z-d8dnZfzoPW36tIvQWygvjRF3hr7/exec\";\n\n  return fetch(url)\n    .then((response) => {\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return;\n      }\n\n      // Return data\n      return response.json().then((data) => dataService.organizeData(data[0]));\n    })\n    .catch((err) => {\n      console.log(\"Fetch Error :\", err);\n    });\n};\n\nconst useData = () => {\n  const res = useQuery(\"scheduleData\", fetchScheduleData);\n\n  return res;\n};\n\nexport default useData;\n","import { createContext, useContext } from \"react\";\n\ninterface ScheduleContextType {\n  // data: DataType | undefined;\n  filteredData: any;\n  onSearch: (value: string) => void;\n}\n\nexport type DataType = {\n  headings: string[];\n  scheduleData: {\n    eLearningUrl: string;\n    group: string;\n    info: string;\n    subject: string;\n    year: number;\n    zoomUrl: string;\n  };\n};\nconst ScheduleContext = createContext<ScheduleContextType | null>(null);\n\nexport const useScheduleContext = () => {\n  const context = useContext(ScheduleContext);\n\n  if (!context) {\n    throw new Error(\n      \"useScheduleContext can be used only within ScheduleProvider\"\n    );\n  }\n  return context;\n};\n\nexport default ScheduleContext;\n","import { ReactNode, useMemo, useState } from \"react\";\nimport useData from \"../../hooks/useData\";\nimport ScheduleContext from \"./schedule-context\";\ninterface Props {\n  children: ReactNode;\n}\n\nconst ScheduleProvider = (props: Props) => {\n  const [search, setSearch] = useState<string>(\"\");\n  const [filteredData, setFilteredData] = useState<any>({});\n\n  const { data } = useData();\n\n  //filter data\n  useMemo(() => {\n    const filtered =\n      data &&\n      data.scheduleData.length > 0 &&\n      data.scheduleData.filter((lecture: any) =>\n        lecture.group.includes(search)\n      );\n    setFilteredData({ ...data, scheduleData: filtered });\n  }, [data, search]);\n\n  // methods\n  const onSearch = (value: string) => {\n    setTimeout(() => {\n      setSearch(value);\n    }, 1000);\n  };\n\n  return (\n    <ScheduleContext.Provider value={{ filteredData, onSearch }}>\n      {props.children}\n    </ScheduleContext.Provider>\n  );\n};\n\nexport default ScheduleProvider;\n","import { Tr, Td, Box } from \"@chakra-ui/react\";\nimport { memo } from \"react\";\nimport { HeaderGroup, Row } from \"react-table\";\n\nconst rowMobileProps = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderBottom: \"1px solid black\",\n} as any;\n\nconst cellMobileProps = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"top\",\n  justifyContent: \"space-between\",\n} as any;\n\ninterface Props {\n  row: Row<object>;\n  headerGroups: HeaderGroup<object>[];\n  isSmallScreen: boolean;\n}\nconst TableRow = ({ row, headerGroups, isSmallScreen = false }: Props) => {\n  const rowProps = isSmallScreen ? rowMobileProps : {};\n  const cellProps = isSmallScreen ? cellMobileProps : {};\n\n  const cellTextAlign = isSmallScreen ? \"right\" : \"left\";\n  return (\n    <Tr {...row.getRowProps()} {...rowProps}>\n      {row.cells.map((cell, i) => {\n        return (\n          <Td {...cell.getCellProps()} {...cellProps}>\n            {isSmallScreen && (\n              <Box>{headerGroups[0]?.headers[i]?.render(\"Header\")}:</Box>\n            )}\n            <Box textAlign={cellTextAlign}>{cell.render(\"Cell\")} </Box>\n          </Td>\n        );\n      })}\n    </Tr>\n  );\n};\n\nexport default memo(TableRow);\n","import { memo } from \"react\";\nimport { useTable, usePagination } from \"react-table\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Flex,\n  IconButton,\n  Text,\n  Tooltip,\n  useMediaQuery,\n  Th,\n  Tr,\n  TextProps,\n} from \"@chakra-ui/react\";\nimport {\n  ArrowRightIcon,\n  ArrowLeftIcon,\n  ChevronRightIcon,\n  ChevronLeftIcon,\n} from \"@chakra-ui/icons\";\nimport TableRow from \"./TableRow\";\n\ninterface Props {\n  columns: any[];\n  data: any[];\n}\n\nfunction MyTable({ columns, data }: Props) {\n  const [isSmallScreen] = useMediaQuery(\"(max-width: 700px)\");\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    usePagination\n  );\n\n  return (\n    <>\n      <Table {...getTableProps()}>\n        <Thead>\n          {!isSmallScreen &&\n            headerGroups.map((headerGroup, i) => (\n              <Tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <Th {...column.getHeaderProps()}>\n                    {column.render(\"Header\")}\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {page.map((row, id) => {\n            prepareRow(row);\n            return (\n              <TableRow\n                key={`table-row-${id}`}\n                row={row}\n                headerGroups={headerGroups}\n                isSmallScreen={isSmallScreen}\n              />\n            );\n          })}\n        </Tbody>\n      </Table>\n\n      <Flex justifyContent=\"space-between\" m={4} alignItems=\"center\">\n        <Flex>\n          <Tooltip label=\"First Page\">\n            <IconButton\n              aria-label=\"first\"\n              onClick={() => gotoPage(0)}\n              isDisabled={!canPreviousPage}\n              icon={<ArrowLeftIcon h={3} w={3} />}\n              mr={4}\n            />\n          </Tooltip>\n          <Tooltip label=\"Previous Page\">\n            <IconButton\n              aria-label=\"previous\"\n              onClick={previousPage}\n              isDisabled={!canPreviousPage}\n              icon={<ChevronLeftIcon h={6} w={6} />}\n            />\n          </Tooltip>\n        </Flex>\n\n        <Flex alignItems=\"center\">\n          <Text flexShrink={0} mr={8}>\n            Page\n            <Text {...textProps}>{pageIndex + 1}</Text>\n            of\n            <Text {...textProps}>{pageOptions.length}</Text>\n          </Text>\n        </Flex>\n\n        <Flex>\n          <Tooltip label=\"Next Page\">\n            <IconButton\n              aria-label=\"next\"\n              onClick={nextPage}\n              isDisabled={!canNextPage}\n              icon={<ChevronRightIcon h={6} w={6} />}\n            />\n          </Tooltip>\n          <Tooltip label=\"Last Page\">\n            <IconButton\n              aria-label=\"last\"\n              onClick={() => gotoPage(pageCount - 1)}\n              isDisabled={!canNextPage}\n              icon={<ArrowRightIcon h={3} w={3} />}\n              ml={4}\n            />\n          </Tooltip>\n        </Flex>\n      </Flex>\n    </>\n  );\n}\n\nconst textProps = { fontWeight: \"bold\", as: \"span\", mx: \"1\" } as TextProps;\n\nexport default memo(MyTable);\n","import { Button } from \"@chakra-ui/button\";\nimport { Link } from \"@chakra-ui/layout\";\nimport React, { memo } from \"react\";\n\ninterface Props {\n  text: string;\n  url: string;\n  color: string;\n}\n\nconst UrlButton = ({ text, url, color }: Props) => {\n  return (\n    <Link href={url} isExternal _hover={{ textDecoration: \"none\" }}>\n      <Button colorScheme={color}>{text}</Button>\n    </Link>\n  );\n};\nexport default memo(UrlButton);\n","import \"./LoadingAnimation.css\";\n\nconst LoadingAnimation = () => {\n  return (\n    <div className=\"sk-cube-grid\">\n      <div className=\"sk-cube sk-cube1\"></div>\n      <div className=\"sk-cube sk-cube2\"></div>\n      <div className=\"sk-cube sk-cube3\"></div>\n      <div className=\"sk-cube sk-cube4\"></div>\n      <div className=\"sk-cube sk-cube5\"></div>\n      <div className=\"sk-cube sk-cube6\"></div>\n      <div className=\"sk-cube sk-cube7\"></div>\n      <div className=\"sk-cube sk-cube8\"></div>\n      <div className=\"sk-cube sk-cube9\"></div>\n    </div>\n  );\n};\n\nexport default LoadingAnimation;\n","import { ChangeEvent, memo, useEffect, useState } from \"react\";\nimport { Box, Input } from \"@chakra-ui/react\";\nimport { useScheduleContext } from \"../app/home/schedule-context\";\n\nconst SearchInput = () => {\n  const [savedSearch, setSavedSearch] = useState<string | undefined | null>();\n\n  const { onSearch } = useScheduleContext();\n\n  //on change save to storage and load\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    localStorage.setItem(\"group\", e.target.value);\n    setSavedSearch(getLocalValue())\n  };\n  //on load get stored value if exist\n  useEffect(() => {\n    setSavedSearch(getLocalValue());\n  }, []);\n\n  const getLocalValue = () => {\n    return localStorage.getItem(\"group\")\n  }\n\n  savedSearch && onSearch(savedSearch);\n\n  return (\n    <Box p=\"20px\">\n      <Input\n        w=\"100%\"\n        placeholder=\"unesi ime grupe npr 1s1\"\n        defaultValue={savedSearch ? savedSearch : \"\"}\n        onChange={handleChange}\n      />\n    </Box>\n  );\n};\n\nexport default memo(SearchInput);\n","import { useMemo } from \"react\";\nimport { Box } from \"@chakra-ui/react\";\n\nimport MyTable from \"../../components/table/Table\";\nimport { useScheduleContext } from \"./schedule-context\";\nimport UrlButton from \"../../components/UrlButton\";\nimport LoadingAnimation from \"../../components/loading/LoadingAnimation\";\nimport SearchInput from \"../../components/SearchInput\";\n\nconst ScheduleTable = () => {\n  const { filteredData: data } = useScheduleContext();\n\n  const isFetched = data?.headings?.length > 0;\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Predmet\",\n        accessor: \"subject\",\n      },\n      {\n        Header: \"Godina\",\n        accessor: \"year\",\n      },\n      {\n        Header: \"Grupa\",\n        accessor: \"group\",\n      },\n      {\n        Header: \"Zoom Url\",\n        accessor: \"zoomUrl\",\n        Cell: ({ cell }: any) =>\n          cell.value && (\n            <UrlButton text=\"Zoom Url\" url={cell.value} color=\"blue\" />\n          ),\n      },\n      {\n        Header: \"E-learning\",\n        accessor: \"eLearningUrl\",\n        Cell: ({ cell }: any) =>\n          cell.value && (\n            <UrlButton text=\"E-learning\" url={cell.value} color=\"orange\" />\n          ),\n      },\n      {\n        Header: \"Napomene\",\n        accessor: \"info\",\n      },\n    ],\n    []\n  );\n  return (\n    <Box>\n      {isFetched ? (\n        <>\n          <SearchInput />\n          <MyTable columns={columns} data={data.scheduleData} />{\" \"}\n        </>\n      ) : (\n        <LoadingAnimation />\n      )}\n    </Box>\n  );\n};\n\nexport default ScheduleTable;\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport Layout from \"../components/Layout\";\nimport ScheduleProvider from \"./home/ScheduleProvider\";\nimport ScheduleTable from \"./home/ScheduleTable\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <Layout>\n      <QueryClientProvider client={queryClient}>\n        <ScheduleProvider>\n          <ScheduleTable />\n        </ScheduleProvider>\n      </QueryClientProvider>\n    </Layout>\n  );\n}\n\nexport default App;\n","// theme.ts\n// 1. import `extendTheme` function\nimport { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\n\nimport App from \"./app/App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}